package co.edu.uptc.server;

import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.logging.Logger;

/**
 * Punto de entrada del servidor distribuido
 * Demuestra configuraci√≥n de RMI Registry y publicaci√≥n de servicios
 */
public class ServerMain {
    private static final Logger LOGGER = Logger.getLogger(ServerMain.class.getName());
    private static final int RMI_PORT = 1100;
    private static final String SERVICE_NAME = "GameService";
    
    public static void main(String[] args) {
        try {
            System.out.println("üöÄ Iniciando Servidor de Batalla Naval Distribuido...\n");
            
            // Crear e inicializar el servicio RMI
            GameServiceImpl gameService = new GameServiceImpl();
            System.out.println("‚úÖ Servicio de juego creado");
            
            // Crear registro RMI - Componente clave de sistemas distribuidos
            Registry registry = LocateRegistry.createRegistry(RMI_PORT);
            System.out.println("‚úÖ Registro RMI creado en puerto " + RMI_PORT);
            
            // Publicar el servicio en el registro - Permite lookup remoto
            registry.bind(SERVICE_NAME, gameService);
            System.out.println("‚úÖ Servicio publicado como '" + SERVICE_NAME + "'");
            
            // Mostrar informaci√≥n del servidor distribuido
            System.out.println("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
            System.out.println("‚ïë           SERVIDOR BATALLA NAVAL DISTRIBUIDO         ‚ïë");
            System.out.println("‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£");
            System.out.println("‚ïë üåê Puerto RMI: " + RMI_PORT + "                                   ‚ïë");
            System.out.println("‚ïë üì° Servicio: " + SERVICE_NAME + "                        ‚ïë");
            System.out.println("‚ïë üéÆ Capacidad: 2 jugadores simult√°neos               ‚ïë");
            System.out.println("‚ïë üìä Estado: Esperando conexiones de clientes...       ‚ïë");
            System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
            
            System.out.println("\nüîó Los clientes pueden conectarse usando:");
            System.out.println("   Host: localhost (o IP del servidor)");
            System.out.println("   Puerto: " + RMI_PORT);
            System.out.println("   Servicio: " + SERVICE_NAME);
            
            System.out.println("\n‚ö†Ô∏è  Para detener el servidor presiona Ctrl+C");
            
            // Configurar shutdown hook para limpieza
            Runtime.getRuntime().addShutdownHook(new Thread(() -> {
                System.out.println("\nüõë Deteniendo servidor distribuido...");
                LOGGER.info("Servidor RMI detenido correctamente");
            }));
            
            LOGGER.info("Servidor RMI iniciado correctamente en puerto " + RMI_PORT);
            
            // Mantener el servidor en ejecuci√≥n
            Thread.currentThread().join();
            
        } catch (Exception e) {
            System.err.println("‚ùå Error cr√≠tico iniciando servidor RMI: " + e.getMessage());
            LOGGER.severe("Error cr√≠tico en el servidor: " + e.getMessage());
            e.printStackTrace();
            System.exit(1);
        }
    }
}
